# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
Description: 'SOLUTION_ID - SOLUTION_NAME - CODE_VERSION'

Parameters:

  InputType:
    Description: Specify the input type for MediaLive (Default parameters are for the Demo video)
    Type: String
    Default: URL_PULL
    AllowedValues:
      - RTP_PUSH
      - RTMP_PUSH
      - URL_PULL

  InputCIDR:
    Description: Specify the MediaLive input Security Group CIDR Block, this is used to restrict access to the MediaLive Input
    Type: String
    Default: ""

  PullUrl:
    Description: Specify the input URL for MediaLive to pull content from.
    Type: String
    Default: "https://d15an60oaeed9r.cloudfront.net/live_stream_v2/sports_reel_with_markers.m3u8"

  PullUser:
    Description: If your PULL URL requitres authentication enter the username 
    Type: String
    Default: ""

  PullPass:
    Description: If your PULL URL requitres authentication enter the password
    Type: String
    Default: ""
    NoEcho: true

  EncodingProfile:
    Description: Select an encoding profile. HD 1080p [1920x1080, 1280x720, 960x540, 768x432, 640x360, 512x288] HD 720p [1280x720, 960x540, 768x432, 640x360, 512x288] SD 540p [960x540, 768x432, 640x360, 512x288]  See the implementation guide for details https://docs.aws.amazon.com/solutions/latest/live-streaming/considerations.html
    Type: String
    Default: HD-720p
    AllowedValues:
      - HD-1080p
      - HD-720p
      - SD-540p

  ChannelStart:
    Description: Start the Live Channel as part of the deployment
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
              Label:
                default: SOURCE CONFIGURATION
              Parameters:
                - InputType
                - PullUrl
                - PullUser
                - PullPass
                - InputCIDR
            -
              Label:
                default: ENCODING OPTIONS
              Parameters:
                - EncodingProfile
                - ChannelStart

        ParameterLabels:
          InputType:
            default: Source Input Type
          EncodingProfile:
            default: Encoding Profile
          InputCIDR:
            default: Input Security Group CIDR Block (REQUIRED FOR RTP_PUSH OR RTMP_PUSH INPUT TYPES)
          PullUrl:
            default: Source URL (REQUIRED FOR URL_PULL INPUT TYPE)
          PullUser:
            default: Source Username (OPTIONAL AND ONLY URL FOR_PULL INPUT TYPE)
          PullPass:
            default: Source Password (OPTIONAL AND ONLY FOR URL_PULL INPUT TYPE)
          ChannelStart:
            default: Start MediaLive Channel

Mappings:
  SourceCode:
    General:
      S3Bucket: CODE_BUCKET
      KeyPrefix: SOLUTION_NAME/CODE_VERSION
  AnonymousData:
    SendAnonymousData:
      Data: Yes

Conditions:
    Metrics: !Equals [ !FindInMap [AnonymousData,SendAnonymousData,Data], Yes]
    Start: !Equals [ !Ref ChannelStart , Yes ]

Resources:

  MediaLiveRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "medialive.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-mediatranscode-role"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Resource:
                  - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]
              -
                Effect: Allow
                Action:
                    - mediastore:DeleteObject
                    - mediastore:DescribeObject
                    - mediastore:GetObject
                    - mediastore:ListItems
                    - mediastore:PutObject
                Resource:
                  - !Join ["", ["arn:aws:mediastore:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:PutParameter
                Resource:
                  - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:

                - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
      Tags:
        -  
          Key: Solution
          Value: SOLUTION_ID

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-custom-resource"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              -
                Effect: Allow
                Action:
                  - medialive:DescribeInputSecurityGroup
                  - medialive:createInputSecurityGroup
                  - medialive:describeInput
                  - medialive:createInput
                  - medialive:deleteInput
                  - medialive:stopChannel
                  - medialive:createChannel
                  - medialive:deleteChannel
                  - medialive:deleteInputSecurityGroup
                  - medialive:describeChannel
                  - medialive:startChannel
                  - medialive:tagResource
                Resource:
                    - !Join ["", ["arn:aws:medialive:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  -  !GetAtt MediaLiveRole.Arn
      Tags:
        -  
          Key: Solution
          Value: SOLUTION_ID

  CustomResource:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-custom-resources
      Description: Used to deploy medialive inputs, channels and send anonymous metrics
      Handler: index.handler
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],   "custom-resource.zip"]]
      Runtime: nodejs12.x
      Timeout: 180
      Tags:
        -  
          Key: Solution
          Value: SOLUTION_ID

  MediaLiveInput:
    Type: Custom::MediaLiveInput
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveInput
      StreamName: !Sub ${AWS::StackName}
      Type: !Ref InputType
      Cidr: !Ref InputCIDR
      PullUrl: !Ref PullUrl
      PullUser: !Ref PullUser
      PullPass: !Ref PullPass
      Solution: SOLUTION_ID

  MediaLiveChannel:
    Type: Custom::MediaLiveChannel
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveChannel
      Name: !Sub ${AWS::StackName}
      EncodingProfile: !Ref EncodingProfile
      Codec: AVC
      Role: !GetAtt MediaLiveRole.Arn
      InputId: !GetAtt MediaLiveInput.Id
      Type: !Ref InputType
      MediaStoreEndpoint: !GetAtt MediaStore.Endpoint
      Solution: SOLUTION_ID

  MediaLiveChannelStart:
    DependsOn: CloudFront
    Condition: Start
    Type: Custom::MediaLiveChannelStart
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveChannelStart
      ChannelId: !GetAtt MediaLiveChannel.ChannelId
      Uuid: !GetAtt Uuid.UUID

  MediaStore:
    DeletionPolicy: Retain
    Type: AWS::MediaStore::Container
    Properties: 
      AccessLoggingEnabled: true
      CorsPolicy: 
        - AllowedHeaders:
          - "*"
          AllowedMethods:
          - GET
          AllowedOrigins:
          - "*"
          ExposeHeaders:
          - "*"
          MaxAgeSeconds: 3000
      Policy:
        !Sub |
          {
            "Version" : "2012-10-17",
            "Statement" : [{
              "Sid" : "MediaStoreCloudFrontAcccess",
              "Effect" : "Allow",
              "Principal" : "*",
              "Action" : [ 
                  "mediastore:GetObject", 
                  "mediastore:DescribeObject"
              ],
              "Resource" : "arn:aws:mediastore:${AWS::Region}:${AWS::AccountId}:container/${AWS::StackName}/*",
              "Condition" : {
                "StringEquals" : {
                  "aws:UserAgent" : "${Uuid.UUID}"
                },
                "Bool" : {
                  "aws:SecureTransport" : "true"
                }
              }
            }]
          }
      LifecyclePolicy:
        !Sub | 
          {
            "rules": [
              {
                "definition": {
                  "path": [ {"wildcard": "stream/*.ts"} ],
                  "seconds_since_create": [
                    {"numeric": [">", 300]}
                  ]
                },
                "action": "EXPIRE"
              }
            ]
          }
      ContainerName: !Sub ${AWS::StackName}

  MediaStoreDomain:
    Type: Custom::MediaStoreDomain
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaStoreDomain
      MediaStoreEndpoint: !GetAtt MediaStore.Endpoint

  MediaStoreDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-MediaStore-Live-Streaming
      DashboardBody: 
        !Sub | 
          {
            "widgets": [
              {
                "type": "log",
                "x": 0,
                "y": 0,
                "width": 12,
                "height": 6,
                "properties": {
                  "title": "Ingress Transaction Per Minute",
                  "query": "SOURCE '/aws/mediastore/${AWS::StackName}' | fields @message\n| filter (Path like \"/stream/index\") and (Operation=\"PutObject\")\n| stats count(*) as TPM by bin(1m)",
                  "region": "${AWS::Region}",
                  "stacked": false,
                  "view": "timeSeries"
                }
              },
              {
                "type": "log",
                "x": 0,
                "y": 6,
                "width": 12,
                "height": 6,
                "properties": {
                  "title":"Ingress PutObject Latencies (Successful Requests)",
                  "query": "SOURCE '/aws/mediastore/${AWS::StackName}' | filter HTTPStatus like /2\\d{2}/ and Operation=\"PutObject\" | stats avg(TurnAroundTime), avg(TotalTime), percentile(TurnAroundTime, 99), percentile(TotalTime, 99) by bin(1m)",
                  "region": "${AWS::Region}",
                  "stacked": false,
                  "view": "timeSeries"
                }
              },
              {
                "type": "log",
                "x": 0,
                "y": 12,
                "width": 12,
                "height": 6,
                "properties": {
                  "title":"Ingress 2xx Status Count by Operation",
                  "query": "SOURCE '/aws/mediastore/${AWS::StackName}' | filter (Path like \"/stream/index\") | filter HTTPStatus like /2\\d{2}/ \n| filter Operation = \"PutObject\" or Operation=\"DeleteObject\"\n| stats count() as `2xx Count` by Operation | sort `2xx Count` desc",
                  "region": "${AWS::Region}",
                  "stacked": false,
                  "view": "table"
                }
              },
              {
                "type": "log",
                "x": 0,
                "y": 18,
                "width": 6,
                "height": 6,
                "properties": {
                  "title":"Ingress 4xx Status Count",
                  "query": "SOURCE '/aws/mediastore/${AWS::StackName}' | filter (Path like \"/stream/index\")\n| filter HTTPStatus like /4\\d{2}/ \n| filter Operation = \"PutObject\"\n| stats count() as `4xx Count` by Operation",
                  "region": "${AWS::Region}",
                  "stacked": false,
                  "view": "table"
                }
              },
              {
                "type": "log",
                "x": 6,
                "y": 18,
                "width": 6,
                "height": 6,
                "properties": {
                  "title":"Ingress 5xx Status Count",
                  "query": "SOURCE '/aws/mediastore/${AWS::StackName}' | filter (Path like \"/stream/index\")\n| filter HTTPStatus like /5\\d{2}/ \n| filter Operation = \"PutObject\"\n| stats count() as `5xx Count` by Operation",
                  "region": "${AWS::Region}",
                  "stacked": false,
                  "view": "table"
                }
              },
              {
                "type": "log",
                "x": 12,
                "y": 0,
                "width": 12,
                "height": 6,
                "properties": {
                  "title": "Egress Transaction Per Minute",
                  "query": "SOURCE '/aws/mediastore/${AWS::StackName}' | fields @message\n| filter Path like \"/stream/index\"\n| filter Operation=\"GetObject\"\n| stats count(*) as TPM by bin(1m)\n",
                  "region": "${AWS::Region}",
                  "stacked": false,
                  "view": "timeSeries"
                }
              },
              {
                "type": "log",
                "x": 12,
                "y": 6,
                "width": 12,
                "height": 6,
                "properties": {
                  "title":"Egress GetObject Latencies (Successful Requests)",
                  "query": "SOURCE '/aws/mediastore/${AWS::StackName}' | filter HTTPStatus like /2\\d{2}/ and Operation=\"GetObject\" | stats avg(TurnAroundTime), avg(TotalTime), percentile(TurnAroundTime, 99), percentile(TotalTime, 99) by bin(1m)",
                  "region": "${AWS::Region}",
                  "stacked": false,
                  "view": "timeSeries"
                }
              },
              {
                "type": "log",
                "x": 12,
                "y": 12,
                "width": 12,
                "height": 6,
                "properties": {
                  "title":"Egress 2xx Status Count by Operation",
                  "query": "SOURCE '/aws/mediastore/${AWS::StackName}' | filter (Path like \"/stream/index\") | filter HTTPStatus like /2\\d{2}/ \n| filter Operation = \"GetObject\" \n| stats count() as `2xx Count` by Operation | sort `2xx Count` desc",
                  "region": "${AWS::Region}",
                  "stacked": false,
                  "view": "table"
                }
              },
              {
                "type": "log",
                "x": 12,
                "y": 18,
                "width": 6,
                "height": 6,
                "properties": {
                  "title":"Egress 4xx Status Count",
                  "query": "SOURCE '/aws/mediastore/${AWS::StackName}' | filter (Path like \"/stream/index\")\n| filter HTTPStatus like /4\\d{2}/ \n| filter Operation = \"GetObject\"\n| stats count() as `4xx Count` by Operation",
                  "region": "${AWS::Region}",
                  "stacked": false,
                  "view": "table"
                }
              },
              {
                "type": "log",
                "x": 18,
                "y": 18,
                "width": 6,
                "height": 6,
                "properties": {
                  "title":"Egress 5xx Status Count",
                  "query": "SOURCE '/aws/mediastore/${AWS::StackName}' | filter (Path like \"/stream/index\")\n| filter HTTPStatus like /5\\d{2}/ \n| filter Operation = \"GetObject\"\n| stats count() as `5xx Count` by Operation",
                  "region": "${AWS::Region}",
                  "stacked": false,
                  "view": "table"
                }
              }
            ]
          }

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub ${AWS::StackName} Live streaming with MediaLive and MediaStore
        Logging:
          IncludeCookies: false
          Bucket: !GetAtt LogsBucket.DomainName
          Prefix: cloudfront-logs/
        Origins:
          - Id: mediastore
            DomainName: !GetAtt MediaStoreDomain.DomainName
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            OriginCustomHeaders:
              -
                HeaderName: User-Agent
                HeaderValue: !Sub ${Uuid.UUID}
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: mediastore
          SmoothStreaming: false
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - Access-Control-Allow-Origin
              - Access-Control-Request-Method
              - Access-Control-Request-Header
          ViewerProtocolPolicy: allow-all
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
      Tags:
        -  
          Key: Solution
          Value: SOLUTION_ID
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W70
            reason: "CloudFront automatically sets the security policy to TLSv1 when the distribution uses the CloudFront domain name (CloudFrontDefaultCertificate=true)"

  LogsBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "Used to store access logs for other buckets"
          - id: W51
            reason: "Bucket is private and does not need a bucket policy"
      
  Uuid:
    Condition: Metrics
    Type: "Custom::UUID"
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: UUID

  AnonymousMetric:
    Condition: Metrics
    Type: "Custom::AnonymousMetric"
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: AnonymousMetric
      SolutionId: SOLUTION_ID
      UUID: !GetAtt Uuid.UUID
      Version: CODE_VERSION
      InputType: !Ref InputType
      EncodingProfile: !Ref EncodingProfile
      ChannelStart: !Ref ChannelStart
      PullUrl: !Ref PullUrl
      InputCIDR: !Ref InputCIDR

Outputs:
  CloudFrontEndpoint:
    Description: CloudFront Live Stream URL
    Value: !Sub https://${CloudFront.DomainName}/stream/index.m3u8

  MediaLiveConsole:
    Description: MediaLive Channel
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/medialive/home?region=${AWS::Region}#!/channels

  MediaStoreConsole:
    Description: MediaStore Container
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/mediastore/home/containers/${MediaStore}

  CloudWatchDashboard:
    Description: CloudWatch Dashboard for MediaStore Ingress and Egress
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${AWS::StackName}-MediaStore-Live-Streaming

  MediaLivePushEndpoint:
    Description: The MediaLive Input ingress endpoint for push input types 
    Value: !GetAtt MediaLiveInput.EndPoint
